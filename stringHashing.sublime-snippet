<snippet>
	<content><![CDATA[
// modular arithmetic class copied from tourist
template <typename T>
T inverse(T a, T m) {
  T u = 0, v = 1;
  while (a != 0) {
    T t = m / a;
    m -= t * a; swap(a, m);
    u -= t * v; swap(u, v);
  }
  assert(m == 1);
  return u;
}
 
template <typename T>
class Modular {
 public:
  using Type = typename decay<decltype(T::value)>::type;
 
  constexpr Modular() : value() {}
  template <typename U>
  Modular(const U& x) {
    value = normalize(x);
  }
 
  template <typename U>
  static Type normalize(const U& x) {
    Type v;
    if (-mod() <= x && x < mod()) v = static_cast<Type>(x);
    else v = static_cast<Type>(x % mod());
    if (v < 0) v += mod();
    return v;
  }
 
  const Type& operator()() const { return value; }
  template <typename U>
  explicit operator U() const { return static_cast<U>(value); }
  constexpr static Type mod() { return T::value; }
 
  Modular& operator+=(const Modular& other) { if ((value += other.value) >= mod()) value -= mod(); return *this; }
  Modular& operator-=(const Modular& other) { if ((value -= other.value) < 0) value += mod(); return *this; }
  template <typename U> Modular& operator+=(const U& other) { return *this += Modular(other); }
  template <typename U> Modular& operator-=(const U& other) { return *this -= Modular(other); }
  Modular& operator++() { return *this += 1; }
  Modular& operator--() { return *this -= 1; }
  Modular operator++(int) { Modular result(*this); *this += 1; return result; }
  Modular operator--(int) { Modular result(*this); *this -= 1; return result; }
  Modular operator-() const { return Modular(-value); }
 
  template <typename U = T>
  typename enable_if<is_same<typename Modular<U>::Type, int>::value, Modular>::type& operator*=(const Modular& rhs) {
#ifdef _WIN32
    uint64_t x = static_cast<int64_t>(value) * static_cast<int64_t>(rhs.value);
    uint32_t xh = static_cast<uint32_t>(x >> 32), xl = static_cast<uint32_t>(x), d, m;
    asm(
      "divl %4; \n\t"
      : "=a" (d), "=d" (m)
      : "d" (xh), "a" (xl), "r" (mod())
    );
    value = m;
#else
    value = normalize(static_cast<int64_t>(value) * static_cast<int64_t>(rhs.value));
#endif
    return *this;
  }
  template <typename U = T>
  typename enable_if<is_same<typename Modular<U>::Type, long long>::value, Modular>::type& operator*=(const Modular& rhs) {
    long long q = static_cast<long long>(static_cast<long double>(value) * rhs.value / mod());
    value = normalize(value * rhs.value - q * mod());
    return *this;
  }
  template <typename U = T>
  typename enable_if<!is_integral<typename Modular<U>::Type>::value, Modular>::type& operator*=(const Modular& rhs) {
    value = normalize(value * rhs.value);
    return *this;
  }
 
  Modular& operator/=(const Modular& other) { return *this *= Modular(inverse(other.value, mod())); }
 
  friend const Type& abs(const Modular& x) { return x.value; }
 
  template <typename U>
  friend bool operator==(const Modular<U>& lhs, const Modular<U>& rhs);
 
  template <typename U>
  friend bool operator<(const Modular<U>& lhs, const Modular<U>& rhs);
 
  template <typename V, typename U>
  friend V& operator>>(V& stream, Modular<U>& number);
 
 private:
  Type value;
};
 
template <typename T> bool operator==(const Modular<T>& lhs, const Modular<T>& rhs) { return lhs.value == rhs.value; }
template <typename T, typename U> bool operator==(const Modular<T>& lhs, U rhs) { return lhs == Modular<T>(rhs); }
template <typename T, typename U> bool operator==(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) == rhs; }
 
template <typename T> bool operator!=(const Modular<T>& lhs, const Modular<T>& rhs) { return !(lhs == rhs); }
template <typename T, typename U> bool operator!=(const Modular<T>& lhs, U rhs) { return !(lhs == rhs); }
template <typename T, typename U> bool operator!=(U lhs, const Modular<T>& rhs) { return !(lhs == rhs); }
 
template <typename T> bool operator<(const Modular<T>& lhs, const Modular<T>& rhs) { return lhs.value < rhs.value; }
 
template <typename T> Modular<T> operator+(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) += rhs; }
template <typename T, typename U> Modular<T> operator+(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) += rhs; }
template <typename T, typename U> Modular<T> operator+(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) += rhs; }
 
template <typename T> Modular<T> operator-(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) -= rhs; }
template <typename T, typename U> Modular<T> operator-(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) -= rhs; }
template <typename T, typename U> Modular<T> operator-(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) -= rhs; }
 
template <typename T> Modular<T> operator*(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) *= rhs; }
template <typename T, typename U> Modular<T> operator*(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) *= rhs; }
template <typename T, typename U> Modular<T> operator*(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) *= rhs; }
 
template <typename T> Modular<T> operator/(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) /= rhs; }
template <typename T, typename U> Modular<T> operator/(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) /= rhs; }
template <typename T, typename U> Modular<T> operator/(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) /= rhs; }
 
template<typename T, typename U>
Modular<T> power(const Modular<T>& a, const U& b) {
  assert(b >= 0);
  Modular<T> x = a, res = 1;
  U p = b;
  while (p > 0) {
    if (p & 1) res *= x;
    x *= x;
    p >>= 1;
  }
  return res;
}
 
template <typename T>
bool IsZero(const Modular<T>& number) {
  return number() == 0;
}
 
template <typename T>
string to_string(const Modular<T>& number) {
  return to_string(number());
}
 
// U == std::ostream? but done this way because of fastoutput
template <typename U, typename T>
U& operator<<(U& stream, const Modular<T>& number) {
  return stream << number();
}
 
// U == std::istream? but done this way because of fastinput
template <typename U, typename T>
U& operator>>(U& stream, Modular<T>& number) {
  typename common_type<typename Modular<T>::Type, long long>::type x;
  stream >> x;
  number.value = Modular<T>::normalize(x);
  return stream;
}
 
/*
using ModType = int;
struct VarMod { static ModType value; };
ModType VarMod::value;
ModType& md = VarMod::value;
using Mint = Modular<VarMod>;
*/


constexpr ll md0 = 1000000009;
using Mint1 = Modular<std::integral_constant<decay<decltype(md0)>::type, md0>>;
constexpr ll md1 = 9999999967;
using Mint2 = Modular<std::integral_constant<decay<decltype(md1)>::type, md1>>;
constexpr ll md2 = 9999999943;
using Mint3 = Modular<std::integral_constant<decay<decltype(md2)>::type, md2>>;

ll p1=31;
ll p2=29;
ll p3=23;
ll maxn=1000009;
vector<Mint1> pow1(maxn);
vector<Mint1> inv1(maxn);
vector<Mint2> pow2(maxn);
vector<Mint2> inv2(maxn);
vector<Mint3> pow3(maxn);
vector<Mint3> inv3(maxn);
class hashh{
public:
    Mint1 h1;
    Mint2 h2;
    Mint3 h3;
    hashh(){
        h1=0;
        h2=0;
        h3=0;
    }
    bool operator==(const hashh& X) const{
        return ((this->h1)==X.h1) and ((this->h2)==X.h2) and ((this->h3)==X.h3);
    }
    bool operator!=(const hashh& X) const{
        return (this->h1!=X.h1) or (this->h2!=X.h2) or (this->h3!=X.h3);
    }
    bool operator<(const hashh& X) const{
        if(this->h1 == X.h1){
            if(this->h2 == X.h2){
                return this->h3 < X.h3;
            } else{
                return this->h2 < X.h2;
            }
        } else{
            return this->h1 < X.h1;
        }
    }
};
class stringHash{
public:
    string s;
    hashh totalHash;
    vector<hashh> hashes;
    stringHash(string s1){
        s=s1;
        for(ll i=0;i<s.length();i++){
            ll d;
            if(s[i]>='a' and s[i]<='b')
                d=s[i]-'a'+1;
            else
                d=s[i]-'A'+1;
            totalHash.h1=(totalHash.h1 + pow1[i]*Mint1(d));
            totalHash.h2=(totalHash.h2 + pow2[i]*Mint2(d));
            totalHash.h3=(totalHash.h3 + pow3[i]*Mint3(d));
            hashes.push_back(totalHash);
        }
    }
    bool operator==(const stringHash &X) const{
        return this->totalHash == X.totalHash;
    }
    bool operator<(const stringHash &X) const{
        return this->totalHash < X.totalHash;
    }
    bool operator!=(const stringHash &X) const{
        return this->totalHash != X.totalHash;
    }
    static void preprocess(){
        pow1[0]=1;
        inv1[0]=1;
        pow2[0]=1;
        inv2[0]=1;
        pow3[0]=1;
        inv3[0]=1;
        for(ll i=1;i<maxn;i++){
            pow1[i]=(pow1[i-1]*Mint1(p1));
            pow2[i]=(pow2[i-1]*Mint2(p2));
            pow3[i]=(pow3[i-1]*Mint3(p3));
            inv1[i]=(inv1[i-1]/Mint1(p1));
            inv2[i]=(inv2[i-1]/Mint2(p2));
            inv3[i]=(inv3[i-1]/Mint3(p3));
        }
    }
    hashh subStrHash(ll l,ll r){
        ll n=s.size();
        hashh newHash;
        newHash.h1 = hashes[r].h1;
        newHash.h2 = hashes[r].h2;
        newHash.h3 = hashes[r].h3;
        if(l-1>=0){
            newHash.h1-=hashes[l-1].h1;
            newHash.h2-=hashes[l-1].h2;
            newHash.h3-=hashes[l-1].h3;
        }
        newHash.h1=newHash.h1 * inv1[l];
        newHash.h2=newHash.h2 * inv2[l];
        newHash.h3=newHash.h3 * inv3[l];
        return newHash;
    }
    ll countUniqueSubstrings(){
        ll cnt=0;
        ll n=s.size();
        for(ll l=1;l<=n;l++){
            set<hashh> st;
            for(ll i=0;i<=n-l;i++){
                hashh newHash=subStrHash(i,i+l-1);
                st.insert(newHash);
            }
            cnt+=st.size();
        }
        return cnt;
    }
    vector<ll> rabinKarp(const stringHash&p){
        string s1=p.s;
        ll len=s1.length();
        vector<ll> sol;
        ll n=s.size();
        for(ll i=0;i<=n-len;i++){
            hashh newHash=subStrHash(i,i+len-1);
            if(newHash==p.totalHash){
                sol.push_back(i);
            }
        }
        return sol;
    }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>hashedstring</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>

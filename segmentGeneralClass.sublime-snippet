<snippet>
	<content><![CDATA[
template <typename T>
class SegmentTree {
public:
    template <typename F>
    SegmentTree(const std::vector<T>& data, F&& reduce) :
        reduce_(reduce),
        size_(data.size())
    {
        data_.reserve(2 * size_);
        data_.insert(data_.cend(), size_, T());

        data_.insert(data_.cend(), data.cbegin(), data.cend());
        for (size_t i = size_ - 1; i > 0; --i) {
            data_[i] = reduce_(data_[i<<1], data_[i<<1|1]);
        }
    }

    size_t size() const noexcept
    {
        return size_;
    }

    void update(size_t index, T value)
    {
        index += size_;
        data_[index] = value;

        while (index > 1) {
            const size_t parent = index >> 1;
            data_[parent] = reduce_(data_[index], data_[index^1]);
            index = parent;
        }
    }

    T reduce(size_t left_index, size_t right_index) const
    {
        size_t lb = size_ + left_index;
        T left = data_[lb++];

        if (left_index == right_index)
            return left;

        size_t ub = size_ + right_index + 1;
        T right = data_[--ub];

        while (lb < ub) {
            if (lb & 1)
                left = reduce_(left, data_[lb++]);

            if (ub & 1)
                right = reduce_(right, data_[--ub]);

            lb >>= 1, ub >>= 1;
        }

        return reduce_(left, right);
    }

private:
    const std::function<T(T, T)> reduce_;
    const size_t size_;

    std::vector<T> data_;

};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>segmentGeneralClass</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
